@page "/"
@inject NavigationManager Navigation
@using E621Maui.Lib.SettingsManager
@using System.Diagnostics

<style>
    body {
        background: #152f56;
    }

    div.polaroid {
        background: #ffffff;
        margin: 5px;
        padding: 20px;
        width: 440px;
    }

        div.polaroid > img {
            width: 400px;
        }

    .tag-artist {
        color: orange;
    }

    .tag-copyright {
        color: purple;
    }

    .tag-character {
        color: green;
    }

    .tag-lore {
        color: darkgreen;
    }

    .tag-species {
        color: orangered;
    }

    .tag-invalid {
        color: red;
    }
</style>

@foreach (var post in Posts)
{
    <div class="polaroid">
        <img src="@post.File.Url" />

        <div class="row">
            <div class="col-2">
                @if (post.Tags.Artist.Length > 0)
                {
                    @foreach (var artist in post.Tags.Artist)
                    {
                        <span class="tag-artist">
                            @artist
                        </span>
                    }
                }
                else
                {
                    <span>Artist unknown</span>
                }
            </div>

            <MudSpacer />

            <div class="col-2">
                <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                    <MudIconButton Icon="@Icons.Material.Filled.MoreHoriz" />
                    <MudIconButton Style="background: orange;" Icon="@Icons.Material.Filled.Download" OnClick="(async () => await SavePostAsync(post))" />
                    <MudIconButton Style="@($"background: {(post.IsFavorited ? "red" : "green")};")"
                                   Icon="@(post.IsFavorited ? Icons.Material.Filled.Star : Icons.Material.Filled.StarBorder)"
                                   OnClick="(async () => await ToggleFavourite(post))" />
                </MudButtonGroup>
            </div>
        </div>

        <p>
            @post.Description
        </p>

        <details>
            <summary>
                @(post.Tags.General.Length
                    + post.Tags.Artist.Length
                    + post.Tags.Character.Length
                    + post.Tags.Species.Length
                    + post.Tags.Invalid.Length
                    + post.Tags.Meta.Length
                    + post.Tags.Lore.Length) Tags
            </summary>

            @if (post.Tags.Artist.Any())
            {
                <b>Artists</b>
                <ul>
                    @foreach (string tag in post.Tags.Artist)
                    {
                        <li class="tag-artist">@tag</li>
                    }
                </ul>
            }

            @if (post.Tags.Character.Any())
            {
                <b>Characters</b>
                <ul>
                    @foreach (string tag in post.Tags.Character)
                    {
                        <li class="tag-character">@tag</li>
                    }
                </ul>
            }

            @if (post.Tags.Species.Any())
            {
                <b>Species</b>
                <ul>
                    @foreach (string tag in post.Tags.Species)
                    {
                        <li class="tag-species">@tag</li>
                    }
                </ul>
            }

            @if (post.Tags.General.Any())
            {
                <b>General</b>
                <ul>
                    @foreach (string tag in post.Tags.General)
                    {
                        <li>@tag</li>
                    }
                </ul>
            }

            @if (post.Tags.Meta.Any())
            {
                <b>Meta</b>
                <ul>
                    @foreach (string tag in post.Tags.Meta)
                    {
                        <li>@tag</li>
                    }
                </ul>
            }

            @if (post.Tags.Lore.Any())
            {
                <b>Lore</b>
                <ul>
                    @foreach (string tag in post.Tags.Lore)
                    {
                        <li class="tag-lore">@tag</li>
                    }
                </ul>
            }

            @if (post.Tags.Invalid.Any())
            {
                <b>Invalid</b>
                <ul>
                    @foreach (string tag in post.Tags.Invalid)
                    {
                        <li class="tag-invalid">@tag</li>
                    }
                </ul>
            }

        </details>
    </div>
}

@code
{
    private AppSettingsManager Settings = new();
    public E621Maui.Lib.Models.Post[] Posts { get; set; } = [];
    E621Maui.Lib.ApiAccess Api { get; set; }

    protected override void OnInitialized()
    {
        var user = Settings.E621UserName;
        var key = Settings.E621ApiKey;
        if (string.IsNullOrWhiteSpace(Settings.E621UserName) || string.IsNullOrWhiteSpace(Settings.E621ApiKey))
        {
            Navigation.NavigateTo("/login");
        }

        Api = new(Settings.E621UserName, Settings.E621ApiKey);

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Api.Initialise();
            Posts = await Api.GetPostsAsync();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task SavePostAsync(E621Maui.Lib.Models.Post post)
    {

        string filePath = Path.Combine(FileSystem.AppDataDirectory, post.Id + "." + post.File.Url.Split('.').Last());

        using (HttpClient client = new HttpClient())
        {
            HttpResponseMessage response = await client.GetAsync(post.File.Url);
            response.EnsureSuccessStatusCode();

            await using (FileStream fs = new FileStream(filePath, FileMode.Create, FileAccess.Write, FileShare.None))
            {
                await response.Content.CopyToAsync(fs);
            }
        }

        Process.Start(new ProcessStartInfo
            {
                FileName = filePath,
                UseShellExecute = true // Ensures it uses the default app
            });
    }

    private async Task ToggleFavourite(E621Maui.Lib.Models.Post post)
    {
        if (post.IsFavorited)
        {
            await Api.UnfavouritePost(post);
        }
        else
        {
            await Api.FavouritePost(post);
        }
    }
}