@page "/"

<style>
    body {
        background: #152f56;
    }

    div.polaroid {
        background: #ffffff;
        margin: 5px;
        padding: 20px;
        width: 440px;
    }

        div.polaroid > img {
            width: 400px;
        }

    .tag-artist {
        color: orange;
    }

    .tag-copyright {
        color: purple;
    }

    .tag-character {
        color: green;
    }

    .tag-lore {
        color: darkgreen;
    }
    
    .tag-species {
        color: orangered;
    }

    .tag-invalid {
        color: red;
    }
</style>

@foreach (var post in Posts)
{
    <div class="polaroid">
        <img src="@post.File.Url" />
        <br />
        @if (post.Tags.Artist.Length > 0)
        {
            @foreach (var artist in post.Tags.Artist)
            {
                <span class="tag-artist">
                    @artist
                </span>
            }
        }
        else
        {
            <span>Artist unknown</span>
        }

        <p>
            @post.Description
        </p>

        <details>
            <summary>
                @(post.Tags.General.Length
                    + post.Tags.Artist.Length
                    + post.Tags.Character.Length
                    + post.Tags.Species.Length
                    + post.Tags.Invalid.Length
                    + post.Tags.Meta.Length
                    + post.Tags.Lore.Length) Tags
            </summary>

            @if (post.Tags.Artist.Any())
            {
                <b>Artists</b>
                <ul>
                    @foreach (string tag in post.Tags.Artist)
                    {
                        <li class="tag-artist">@tag</li>
                    }
                </ul>
            }

            @if (post.Tags.Character.Any())
            {
                <b>Characters</b>
                <ul>
                    @foreach (string tag in post.Tags.Character)
                    {
                        <li class="tag-character">@tag</li>
                    }
                </ul>
            }

            @if (post.Tags.Species.Any())
            {
                <b>Species</b>
                <ul>
                    @foreach (string tag in post.Tags.Species)
                    {
                        <li class="tag-species">@tag</li>
                    }
                </ul>
            }

            @if (post.Tags.General.Any())
            {
                <b>General</b>
                <ul>
                    @foreach (string tag in post.Tags.General)
                    {
                        <li>@tag</li>
                    }
                </ul>
            }

            @if (post.Tags.Meta.Any())
            {
                <b>Meta</b>
                <ul>
                    @foreach (string tag in post.Tags.Meta)
                    {
                        <li>@tag</li>
                    }
                </ul>
            }

            @if (post.Tags.Lore.Any())
            {
                <b>Lore</b>
                <ul>
                    @foreach (string tag in post.Tags.Lore)
                    {
                        <li class="tag-lore">@tag</li>
                    }
                </ul>
            }

            @if (post.Tags.Invalid.Any())
            {
                <b>Invalid</b>
                <ul>
                    @foreach (string tag in post.Tags.Invalid)
                    {
                        <li class="tag-invalid">@tag</li>
                    }
                </ul>
            }

        </details>
    </div>
}

@code
{
    public E621Maui.Lib.Models.Post[] Posts { get; set; } = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            E621Maui.Lib.ApiAccess api = new("", "");
            api.Initialise();
            Posts = await api.GetPostsAsync();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}